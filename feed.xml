<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ngetchell.com</title>
    <link href="https://blog-ngetchell.github.io/feed.xml" rel="self" />
    <link href="https://blog-ngetchell.github.io" />
    <updated>2022-07-16T18:35:14-04:00</updated>
    <author>
        <name>Nicholas M. Getchell</name>
    </author>
    <id>https://blog-ngetchell.github.io</id>

    <entry>
        <title>Expring Group Membership</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://blog-ngetchell.github.io/expring-group-membership/"/>
        <id>https://blog-ngetchell.github.io/expring-group-membership/</id>
            <category term="PowerShell"/>

        <updated>2022-06-09T19:48:38-04:00</updated>
            <summary>
                <![CDATA[
                    As a systems administrator working with Active Directory your probably proficient in granting access to network resources. How good are&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>As a systems administrator working with Active Directory your probably proficient in granting access to network resources. How good are you at <em>removing</em> permissions once the access is no longer needed? Probably not as good. Enter Expiring Group Membership in Active Directory. You can specify how long an object belongs in a group. Active Directory handles the removal for you.</p>
<p>To use Expiring Group Memberships, make sure that the feature is enabled in your forest. This is a feature added in Server 2016 and is not on by default.</p>
<pre><code class="language-powershell">## If Enabled EnabledScopes 
## won&#39;t be empty

$Forest = Get-ADForest
Get-ADOptionalFeature -Identity &#39;Privileged Access Management Feature&#39;

## Enable Privileged Access

$enableADOptionalFeatureSplat = @{
    Scope = &#39;ForestOrConfigurationSet&#39;
    Target = $Forest
    Identity = &#39;Privileged Access Management Feature&#39;
}
Enable-ADOptionalFeature @enableADOptionalFeatureSplat
</code></pre>
<p>Existing groups should work but if you don’t have one, create a group now.</p>
<pre><code class="language-powershell">$newADGroupSplat = @{
    GroupCategory = &#39;Security&#39;
    DisplayName = &quot;Temporary Membership&quot;
    GroupScope = &#39;Global&#39;
    Name = &#39;TempGroup&#39;
}
New-ADGroup @newADGroupSplat
</code></pre>
<p>Now add the membership using the MemberTimeToLive parameter.</p>
<pre><code class="language-powershell">$addADGroupMemberSplat = @{
    Members = &#39;ngetchell&#39;
    MemberTimeToLive = ( New-Timespan -Days 365)
    Identity = &#39;TempGroup&#39;
}
Add-ADGroupMember @addADGroupMemberSplat
</code></pre>
<h2 id="expiring-membership-report">Expiring Membership Report</h2>
<p>Now to generate a report to show off a members and their membership timespan. You could even pipe to Excel if you’d prefer.</p>
<pre><code class="language-powershell">Get-ADGroup -Identity TempGroup -ShowMemberTimeToLive -Properties members | 
    Select-Object -ExpandProperty members | 
    ForEach-Object {
    if ( $_ -match &#39;&lt;TTL=&#39; ) {
        $ttlstring, $DN = $_ -split &#39;&gt;&#39;

        [int]$ttl = $ttlstring -replace &#39;&lt;TTL=&#39;
        $Timespan = New-Timespan -Seconds $ttl
        
        [pscustomobject]@{
            MemberDN   = $DN -replace &quot;^,&quot;, &quot;&quot;
            TTL        = $Timespan
            ExpiryDate = $((Get-Date).Add($Timespan))
        } 
    }
    else {
        [pscustomobject]@{
            MemberDN   = $_
            TTL        = 0
            ExpiryDate = 0
        } 
    }
} | Export-Excel -Path ~\Desktop\ExpiringGroupMembers.xlsx
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Logging PowerShell Scripts</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://blog-ngetchell.github.io/logging-powershell-scripts/"/>
        <id>https://blog-ngetchell.github.io/logging-powershell-scripts/</id>

        <updated>2022-07-16T18:35:14-04:00</updated>
            <summary>
                <![CDATA[
                    As you progress from running commands at the console, to scripting tedious work, to automating entire processes you still need&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
  <p>
    As you progress from running commands at the console, to scripting tedious work, to automating entire processes you still need to keep an eye on whats running. Nobody likes figuring out what went wrong on in a process by debugging your script. You should integrate logging into any scripts that run unattended. Logging saves time and helps surface errors in your scripts. Luckily, saving to a log file in PowerShell is simple.
  </p>

    <h2 id="outfile">
      Out-File
    </h2>

  <p>
    Out-file is a very simple way to handle writing to a file. Simply put Out-File at the end of your pipeline to save output to a file.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\Out-File.log"
'[Error]: Service failed to restart' | Out-File -File $File -Append</code></pre>

  <p>
    You can also catch errors and put the contents of the error into a file.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\Out-File.log"

try {
    Invoke-RestMethod -URI 'https://doesnotexist' -ErrorAction Stop
} catch {
    $ErrorOutput = $_
    $ErrorOutput | Out-File -File $File -Append
}
</code></pre>

    <h2 id="teeobject">
      Tee-Object
    </h2>

  <p>
    The <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/tee-object?view=powershell-6" target="_blank">Tee-Object</a> cmdlet allows you to split the direction of the pipeline. If you have a Linux background this will sound familar. The pipeline output still continues on but you can save off pipeline output into a file. This makes it easy to see what's going on when your at the console since the output still appears on the screen but you can still save output for later viewing.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\Tee-Object.log"
$Result = Get-Process -Name PowerShell | 
    Tee-Object -FilePath $File -Append 

$Result | 
    Select-Object -Property Name,CPU,ID | 
    Tee-Object -FilePath $File -Append</code></pre>

  <p>
    You can see that the first command saves the output of Get-Process to both the file on your desktop as well as in the $Results variable. Then, we pipe the previous results out, manipulate the output via Select-Object, then call Tee-Object again. This time, the output goes to the console window as well as the log file.
  </p>

  <p>
    Using Tee-Object is a great way to keep pipeline output in the console and in a permanent log. As with Out-File, remember to use the -Append parameter. You probably don’t want to overwrite the log file with each write.
  </p>

    <h2 id="write-to-the-event-log">
      Write to the Event Log
    </h2>
<pre class="line-numbers  language-html"><code>$Logname = 'Getchell.org'
$Source = 'Automated Script'

$NewLog = @{
    Logname = $Logname
    Source = $Source
}

try {
    New-EventLog @NewLog -ErrorAction Stop
} catch [System.InvalidOperationException] {
    # Ignore if source already exists
}

$InformationalLog = @{
    Logname = $Logname
    Source = $Source
    EntryType = 'Information'
    Message = 'Verbose informational message'
    EventId = 19
}

Write-EventLog @InformationalLog</code></pre>

    <h2 id="other-considerations">
      Other Considerations
    </h2>

  <p>
    Working with objects can be a pain to format for logging purposes. If you use the default pipeline view, you <a href="https://powershell.getchell.org/2016/10/26/never-lose-work/" target="_blank">may lose data due to the PowerShell formatting system</a>. A quick way to get around this is to pipe out to ConvertTo-Json before writing the pipeline to a log. This will serialize the object so it can be written to disk without data loss. ConvertTo-Json will also expand any nested properties, something Select-Object -Property * and the Format-* cmdlets won't do.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\object-json.log"

Get-Service -Name BITS | 
    ConvertTo-Json | 
    Tee-Object -FilePath $File -Append</code></pre>

    <h2 id="log-filenames">
      Log Filenames
    </h2>

  <p>
    Another thing to consider is to name logs with timestamp data. If you ever have to debug your automated script you’ll thank yourself later for keeping each run of your process in separate files. I usually use the following convention:
  </p>
<pre class="line-numbers  language-html"><code>$Log = ".\log\process-name-$( Get-Date -Format FileDateTime ).log"</code></pre>

  <p>
    Get-Date has a built-in format that keeps invalid characters out a date/time string for use with filenames. I reference this constantly.
  </p>

    <h2 id="viewing-logs-in-realtime">
      Viewing Logs in Real-Time
    </h2>

  <p>
    I prefer to keep logs as files as I have more experience with grep and with the Event Viewer. For log running processes I <a href="https://powershell.getchell.org/2016/10/19/tail-a-file-in-powershell/" target="_blank">tail the open log files</a> to see progress in real-time. This is great for debugging scheduled tasks where you aren't at the console.
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
</feed>
